package logger

import (
	"go.uber.org/zap"
)

// Log представляет собой синглтон логера приложения, использующегося для логирования различных событий.
// По умолчанию инициализируется как "no-operation" логер, который не выполняет никаких действий при его использовании.
// Для активации логирования необходимо вызвать функцию Initialize с соответствующим уровнем логирования.
var Log *zap.Logger = zap.NewNop()

// Initialize инициализирует синглтон логера с указанным уровнем логирования.
// Функция конфигурирует и устанавливает глобальный логер приложения, который будет использоваться
// для логирования в различных частях приложения.
//
// Параметр level должен быть одним из поддерживаемых уровней логирования (например, "debug", "info", "error"),
// которые определяют минимальный уровень серьёзности сообщений, записываемых логером.
// В случае неправильно указанного уровня логирования функция возвращает ошибку.
//
// При успешной инициализации логер устанавливается как глобальный синглтон,
// доступный для использования через переменную Log.
//
// Возвращает ошибку в случае неудачи инициализации логера.
func Initialize(level string) error {
	// преобразуем текстовый уровень логирования в zap.AtomicLevel
	lvl, err := zap.ParseAtomicLevel(level)
	if err != nil {
		return err
	}
	// создаём новую конфигурацию логера
	cfg := zap.NewProductionConfig()
	// устанавливаем уровень
	cfg.Level = lvl
	// создаём логер на основе конфигурации
	zl, err := cfg.Build()
	if err != nil {
		return err
	}
	// устанавливаем синглтон
	Log = zl
	return nil
}
